/usr/local/redis/redis.conf    安装路径
 /etc/redis/              复制到的路径

查看redis服务器进程
ps aux | grep redis
lsof -i :6379
netstat -tnlp

sudo kill -9 pid 杀死redis服务器

redis-server 启动默认本机redis服务器，不能退出本窗口
redis-server &  这样在本窗口退出后，服务仍存在
sudo redis-server /etc/redis/redis.conf 启动指定加载的配置文件的服务器

redis-cli   连接本机redis客户端
redis-cli -h 192.168.26.128 -p 6379  连接指定ip指定port客户端

数据库没有名称，默认有16个，通过0-15来标识，连接redis默认选择第一个数据库
select 0


redis数据类型

String类型   一个数据最多512M
set key value   插入/更新（修改）
get key   获取
del key  删除

setex key seconds value 设置过期时间
set name 100 Tom
ttl key   查看过期时间  返回值若为-1，表示一直存在
ttl name  查看剩余过期时间
expire key seconds 设置剩余时间

mset key1 value1 key2 value2 ...    设置多个
mset addr Beijing like soccer
mget key1 key2   得到多个
mget sddr like

append --------在key对应的value后追加
append name lalalala  返回的是数据长度

keys *   查看所有key
keys a*   查看以a开头的key

exists key  查看key是否存在
type key  查看key类型


Hash类型   用于存储对象，对象的结构为属性，值(类型为string)
hset key field value      设置一个hash数据结构
hset person name huangzhen
type person    # hash
hget person field   获取一个值
hget person    会报错

hmset key field1 value1 field2 value2 ...
hmset person name huangzhen age 22 address Beijing

hgetall person   获得person中所有field和value
hmget person name age          获取key中部分field对应的value
hkeys person   获得所有field
hvals person   获得所有value

del key 全部删除
hdel person name 删除person里面某一个field及其value

用户购物车类型为hash类型



List类型 （可存放重复数据）
元素类型为string
lpush key value  左插
rpush key value  右插
lpush class zhangsan       返回的是里面有几个元素
rpush class  wangwu

lrange key start stop  获取从下标start到下标stop的数据
lrange class 0 0   获取从下标0到下标0的数据
lrange class 0 1
lrange class 0 -1

lrem key count value 从左边移除
count为0即删除所有等于value的数据，count>0即从表头开始删除count个等于value的数据，count<0即从表尾开始删除count个等于value的数据

lset key i new_data    设置key中下标index=i的数据为new_data
linsert key before/after old_value new_value        在key里old_value之前/之后插入new_value

ltrim key start stop 截取从start到stop的元素


set类型（无序存放不重复数据）  没有修改操作！
元素为string
sadd key member1 member2 ...   添加数据
smembers key    获取所有
srem key member  删除某个member


zset类型（权重有序集合）   没有修改操作！
元素为string  元素唯一不重复，有序
每个元素都会关联一个double类型的score，表示权重，通过权重自动将元素从小到大排序
zadd key score member    在key中添加权重为score的member
zadd key score1 member1 score2 member2 score3 member3 ...

zrange key start stop   查看获取从下标start到下标stop的数据，
zrangebyscore key min max    获取权重在min到max之间的数据

zscore key member   返回某个成员的权重score
zmscore key member1 member2 member3 ...     返回多个成员的权重score1 score2 ...

zrem key member1 member2 ...  根据成员名删除
zremrangebyscore key min max    根据权重删除权重范围在min到max之间的



Redis的 C - S 架构：
        基于客户端-服务端模型以及请求/响应协议的TCP服务。
        客户端向服务端发送一个查询请求，并监听Socket返回。
        通常是以阻塞模式，等待服务端响应。
        服务端处理命令，并将结果返回给客户端

存在的问题：
        如果Redis服务端需要同时处理多个请求，加上网络延迟，那么服务端利用率不高，效率降低。

解决的办法：
        管道pipeline
                可以一次性发送多条命令并在执行完后一次性将结果返回。
                pipeline通过减少客户端与Redis的通信次数来实现降低往返延时时间。
                实现的原理

                实现的原理是队列。
                Client可以将三个命令放到一个tcp报文一起发送。
                Server则可以将三条命令的处理结果放到一个tcp报文返回。
                队列是先进先出，这样就保证数据的顺序性。





